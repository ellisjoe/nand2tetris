/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.jellis.nand2tetris.assembler;

import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;

public class Assembler {
    private Assembler() {}

    public static void assemble(Path asmPath, Path hackPath) {
        List<String> binary = assemble(asmPath);

        try (BufferedWriter writer = Files.newBufferedWriter(hackPath)) {
            for (String b : binary) {
                writer.write(b);
                writer.write("\n");
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public static List<String> assemble(Path asmPath) {
        SymbolTable table = new SymbolTable();
        List<Command> commands = parse(asmPath);

        int romOffset = 0;
        for (Command command : commands) {
            switch (command) {
                case ACommand aCommand -> romOffset++;
                case CCommand cCommand -> romOffset++;
                case LCommand lCommand -> table.add(lCommand.symbol(), romOffset);
            }
        }

        return commands.stream()
                .filter(c -> !(c instanceof LCommand))
                .map(c -> c.translate(table))
                .map(Command::assemble)
                .toList();
    }

    static List<Command> parse(Path asmPath) {
        try {
            return Files.readAllLines(asmPath).stream()
                    .map(String::trim)
                    .filter(s -> !s.isBlank())
                    .filter(s -> !s.startsWith("//"))
                    .map(Command::parse)
                    .toList();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
