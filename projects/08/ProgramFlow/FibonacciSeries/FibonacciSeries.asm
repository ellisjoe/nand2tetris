// Push[filename=FibonacciSeries, segment=argument, index=1]
@1
D=A
@ARG
A=M
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// Pop[filename=FibonacciSeries, segment=pointer, index=1]
@SP
M=M-1
A=M
D=M
@R13
M=D
@1
D=A
@THIS
D=A+D
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// Push[filename=FibonacciSeries, segment=constant, index=0]
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// Pop[filename=FibonacciSeries, segment=that, index=0]
@SP
M=M-1
A=M
D=M
@R13
M=D
@0
D=A
@THAT
A=M
D=A+D
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// Push[filename=FibonacciSeries, segment=constant, index=1]
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// Pop[filename=FibonacciSeries, segment=that, index=1]
@SP
M=M-1
A=M
D=M
@R13
M=D
@1
D=A
@THAT
A=M
D=A+D
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// Push[filename=FibonacciSeries, segment=argument, index=0]
@0
D=A
@ARG
A=M
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// Push[filename=FibonacciSeries, segment=constant, index=2]
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// Sub[]
@SP
M=M-1
A=M
D=M
@R13
M=D
@SP
M=M-1
A=M
D=M
@R14
M=D
@R13
D=M
@R14
D=M-D
@SP
A=M
M=D
@SP
M=M+1
// Pop[filename=FibonacciSeries, segment=argument, index=0]
@SP
M=M-1
A=M
D=M
@R13
M=D
@0
D=A
@ARG
A=M
D=A+D
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// Label[filename=FibonacciSeries, functionName=main, label=LOOP]
(FibonacciSeries.main$LOOP)
// Push[filename=FibonacciSeries, segment=argument, index=0]
@0
D=A
@ARG
A=M
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// IfGoTo[filename=FibonacciSeries, functionName=main, label=COMPUTE_ELEMENT]
@SP
M=M-1
A=M
D=M
@FibonacciSeries.main$COMPUTE_ELEMENT
D;JNE
// GoTo[filename=FibonacciSeries, functionName=main, label=END]
@FibonacciSeries.main$END
0;JMP
// Label[filename=FibonacciSeries, functionName=main, label=COMPUTE_ELEMENT]
(FibonacciSeries.main$COMPUTE_ELEMENT)
// Push[filename=FibonacciSeries, segment=that, index=0]
@0
D=A
@THAT
A=M
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// Push[filename=FibonacciSeries, segment=that, index=1]
@1
D=A
@THAT
A=M
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// Add[]
@SP
M=M-1
A=M
D=M
@R13
M=D
@SP
M=M-1
A=M
D=M
@R14
M=D
@R13
D=M
@R14
D=M+D
@SP
A=M
M=D
@SP
M=M+1
// Pop[filename=FibonacciSeries, segment=that, index=2]
@SP
M=M-1
A=M
D=M
@R13
M=D
@2
D=A
@THAT
A=M
D=A+D
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// Push[filename=FibonacciSeries, segment=pointer, index=1]
@1
D=A
@THIS
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// Push[filename=FibonacciSeries, segment=constant, index=1]
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// Add[]
@SP
M=M-1
A=M
D=M
@R13
M=D
@SP
M=M-1
A=M
D=M
@R14
M=D
@R13
D=M
@R14
D=M+D
@SP
A=M
M=D
@SP
M=M+1
// Pop[filename=FibonacciSeries, segment=pointer, index=1]
@SP
M=M-1
A=M
D=M
@R13
M=D
@1
D=A
@THIS
D=A+D
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// Push[filename=FibonacciSeries, segment=argument, index=0]
@0
D=A
@ARG
A=M
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// Push[filename=FibonacciSeries, segment=constant, index=1]
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// Sub[]
@SP
M=M-1
A=M
D=M
@R13
M=D
@SP
M=M-1
A=M
D=M
@R14
M=D
@R13
D=M
@R14
D=M-D
@SP
A=M
M=D
@SP
M=M+1
// Pop[filename=FibonacciSeries, segment=argument, index=0]
@SP
M=M-1
A=M
D=M
@R13
M=D
@0
D=A
@ARG
A=M
D=A+D
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// GoTo[filename=FibonacciSeries, functionName=main, label=LOOP]
@FibonacciSeries.main$LOOP
0;JMP
// Label[filename=FibonacciSeries, functionName=main, label=END]
(FibonacciSeries.main$END)
