@256
D=A
@SP
M=D
@3000
D=A
@THIS
M=D
@4000
D=A
@THAT
M=D
@Sys.init$ret3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys$Sys.init
0;JMP
(Sys.init$ret3)
// Function[filename=Main, functionName=Main.fibonacci, nVars=0]
(Main$Main.fibonacci)
D=0
// Push[filename=Main, segment=argument, index=0]
@0
D=A
@ARG
A=M
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// Push[filename=Main, segment=constant, index=2]
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// Lt[]
@SP
M=M-1
A=M
D=M
@R13
M=D
@SP
M=M-1
A=M
D=M
@R14
M=D
@R13
D=M
@R14
D=M-D
@SP
A=M
M=D
@SP
M=M+1
@SP
M=M-1
A=M
D=M
@JLT0
D;JLT
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@END0
0;JMP
(JLT0)
@1
A=-A
D=A
@SP
A=M
M=D
@SP
M=M+1
(END0)
// IfGoTo[filename=Main, functionName=Main.fibonacci, label=N_LT_2]
@SP
M=M-1
A=M
D=M
@Main.Main.fibonacci$N_LT_2
D;JNE
// GoTo[filename=Main, functionName=Main.fibonacci, label=N_GE_2]
@Main.Main.fibonacci$N_GE_2
0;JMP
// Label[filename=Main, functionName=Main.fibonacci, label=N_LT_2]
(Main.Main.fibonacci$N_LT_2)
// Push[filename=Main, segment=argument, index=0]
@0
D=A
@ARG
A=M
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// Return[]
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
A=M
D=A+1
@SP
M=D
@1
D=A
@R13
D=M-D
A=D
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// Label[filename=Main, functionName=Main.fibonacci, label=N_GE_2]
(Main.Main.fibonacci$N_GE_2)
// Push[filename=Main, segment=argument, index=0]
@0
D=A
@ARG
A=M
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// Push[filename=Main, segment=constant, index=2]
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// Sub[]
@SP
M=M-1
A=M
D=M
@R13
M=D
@SP
M=M-1
A=M
D=M
@R14
M=D
@R13
D=M
@R14
D=M-D
@SP
A=M
M=D
@SP
M=M+1
// Call[filename=Main, functionName=Main.fibonacci, functionToCall=Main.fibonacci, nArgs=1]
@Main.Main.fibonacci$ret0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main$Main.fibonacci
0;JMP
(Main.Main.fibonacci$ret0)
// Push[filename=Main, segment=argument, index=0]
@0
D=A
@ARG
A=M
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// Push[filename=Main, segment=constant, index=1]
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// Sub[]
@SP
M=M-1
A=M
D=M
@R13
M=D
@SP
M=M-1
A=M
D=M
@R14
M=D
@R13
D=M
@R14
D=M-D
@SP
A=M
M=D
@SP
M=M+1
// Call[filename=Main, functionName=Main.fibonacci, functionToCall=Main.fibonacci, nArgs=1]
@Main.Main.fibonacci$ret1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main$Main.fibonacci
0;JMP
(Main.Main.fibonacci$ret1)
// Add[]
@SP
M=M-1
A=M
D=M
@R13
M=D
@SP
M=M-1
A=M
D=M
@R14
M=D
@R13
D=M
@R14
D=M+D
@SP
A=M
M=D
@SP
M=M+1
// Return[]
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
A=M
D=A+1
@SP
M=D
@1
D=A
@R13
D=M-D
A=D
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// Function[filename=Sys, functionName=Sys.init, nVars=0]
(Sys$Sys.init)
D=0
// Push[filename=Sys, segment=constant, index=4]
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// Call[filename=Sys, functionName=Sys.init, functionToCall=Main.fibonacci, nArgs=1]
@Sys.Sys.init$ret2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main$Main.fibonacci
0;JMP
(Sys.Sys.init$ret2)
// Label[filename=Sys, functionName=Sys.init, label=END]
(Sys.Sys.init$END)
// GoTo[filename=Sys, functionName=Sys.init, label=END]
@Sys.Sys.init$END
0;JMP
